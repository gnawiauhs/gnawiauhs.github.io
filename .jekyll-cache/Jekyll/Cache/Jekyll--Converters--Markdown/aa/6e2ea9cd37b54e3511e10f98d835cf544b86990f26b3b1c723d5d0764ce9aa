I"q<p>本文对前端常见词汇进行解释，并分享相关文章，适合前端初学者进行知识拓展。<br />
<strong>优秀文章请积极推荐哦！</strong><br />
废话不多说，下面开始（打哪指哪，不分前后）：</p>
<h2 id="--前端">- 前端</h2>
<p><strong>解释：</strong><br />
前端，指的是网站的前台部分，是直接面向用户的，主要工作是美化页面，优化交互动画，为用户提供视觉上的美的感受，提高操作体验。</p>

<p><strong>推荐文章：</strong></p>
<ul>
  <li><a href="https://ued.party/">《我的职业是前端工程师》</a></li>
</ul>

<h2 id="--语义化">- 语义化</h2>
<p><strong>解释：</strong><br />
HTML5新增的一些带有意义的标签，使用这些标签制作网页称作语义化开发。</p>

<p><strong>推荐文章：</strong></p>
<ul>
  <li><a href="https://www.cnblogs.com/wuqiutong/p/5986220.html">什么是语义化的HTML?有何意义？为什么要做到语义化？</a></li>
</ul>

<h2 id="--自适应">- 自适应</h2>
<p><strong>解释：</strong><br />
由于移动互联网的发展，网页不仅要在PC端浏览，还要满足在不同尺寸、分辨率的移动设备上浏览，这种根据屏幕尺寸自动改变尺寸的页面叫做自适应页面。</p>

<p><strong>推荐文章：</strong></p>
<ul>
  <li><a href="https://www.cnblogs.com/constantince/p/5708930.html">浅谈Web自适应</a></li>
  <li><a href="http://caibaojian.com/flexible-js-2.html">flexible.js如何实现rem自适应</a></li>
</ul>

<h2 id="--less-和-sass">- Less 和 Sass</h2>
<p><strong>解释：</strong><br />
Less 和 Sass 都是 CSS 的预处理工具，提供了很多 CSS 没有的功能，如混入、变量、运算、函数、嵌套、颜色处理等。<br />
类似的工具还有 stylus、PostCSS 等。</p>

<p><strong>推荐文章：</strong></p>
<ul>
  <li><a href="http://lesscss.cn/">Less 中文网</a></li>
  <li><a href="https://www.sass.hk">Sass 中文网</a></li>
  <li><a href="https://www.w3cplus.com/css/an-introduction-to-less-and-comparison-to-sass.html">Less介绍及其与Sass的差异</a></li>
  <li><a href="https://blog.csdn.net/crper/article/details/80448890">CSS-Next : CSS预处理器简单写法的替代者, 想了解下么?</a></li>
  <li><a href="https://www.codesky.me/archives/postcss-cssnext-css-features.wind">从 PostCSS 与 cssnext 中看 CSS 的新特性</a></li>
</ul>

<h2 id="--数据可视化">- 数据可视化</h2>
<p><strong>解释：</strong><br />
通过HTML5的 Canvas 绘图或 SVG 绘图将数据进行图形化展示，使数据更直观可见。常用的工具有 echarts、highcharts、d3.js、three.js等。</p>

<p><strong>推荐文章：</strong><br />
<a href="https://blog.csdn.net/Tw6cy6uKyDea86Z/article/details/79984553">超级干货 ：一文读懂数据可视化</a></p>

<h2 id="--es6">- ES6</h2>
<p><strong>解释：</strong><br />
ECMAScript 6，JavaScript 的第六代标准，新增了 let、const、解构赋值、Symbol数据类型、promise、import、export 等新特性。</p>

<p><strong>推荐文章：</strong><br />
<a href="http://es6.ruanyifeng.com/">ECMAScript 6 入门</a></p>

<h2 id="--模块化">- 模块化</h2>
<p><strong>解释：</strong><br />
将大文件拆分成多个小文件，然后进行统一的拼装和加载，对于开发复杂的大型网站来说，模块化开发使产品代码更易于维护和管理。典型的模块化规范有AMD(RequireJS)、CommonJS和CMD(SeaJS)</p>

<p><strong>推荐文章：</strong><br />
<a href="https://www.cnblogs.com/chenguangliang/p/5856701.html">js模块化编程之彻底弄懂CommonJS和AMD/CMD！</a><br />
<a href="https://www.zhihu.com/question/20351507">AMD 和 CMD 的区别有哪些？</a></p>

<h2 id="--工程化">- 工程化</h2>
<p><strong>解释：</strong><br />
随着前端技术的发展，前端能做的事情越来越复杂，传统的一行行手敲代码的开发方式已经不能满足前端的需求，于是像React、AngularJS、Vue这样的前端框架应运而生，前端开始引入软件工程管理的思想，将前端开发工程化。</p>

<p><strong>推荐文章：</strong><br />
<a href="https://www.zhihu.com/question/24558375">谁能介绍下web前端工程化？</a></p>

<h2 id="--自动化">- 自动化</h2>
<p><strong>解释：</strong><br />
前端自动化是工程化开发的一部分，我们可以通过各种第三方工具自动安装开发环境，自动检测代码错误，合并压缩程序，编译浏览器不能识别的代码等。自动化开发工具有 webpack、gulp、grunt等。</p>

<p><strong>推荐文章：</strong><br />
<a href="https://www.cnblogs.com/kasmine/p/6436131.html">浅谈前端自动化构建</a><br />
<a href="https://www.jianshu.com/p/1c5d6427cda5">前端自动化工具推荐</a><br />
<a href="https://segmentfault.com/a/1190000006178770#articleHeader0">入门 Webpack，看这篇就够了</a></p>

<h2 id="--前端安全">- 前端安全</h2>
<p><strong>推荐文章：</strong><br />
<a href="https://segmentfault.com/a/1190000016551188">前端安全系列（一）：如何防止XSS攻击？</a><br />
<a href="https://segmentfault.com/a/1190000016659945">前端安全系列（二）：如何防止CSRF攻击？</a></p>

<p>。。。待续</p>

<p><a href="https://github.com/vinstweb/Front-End-Knowledge-Tree/blob/master/Front-End-Words-Set.md">阅读原文</a> 请关注我的 <a href="https://github.com/vinstweb">github</a></p>
:ET